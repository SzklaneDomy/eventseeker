{"version":3,"sources":["components/Navbar.jsx","components/Logo.jsx","components/MapComponent.jsx","components/Event.jsx","components/EventList.jsx","components/LoadingSpinner.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","state","city","isAlertOpen","onChange","e","setState","target","name","value","toggle","onSubmit","trim","length","preventDefault","props","searchEvent","Form","InputGroup","size","className","style","margin","width","minWidth","Prepend","Button","variant","type","onClick","this","FormControl","placeholder","aria-label","aria-describedby","Alert","height","marginLeft","textAlign","show","dismissible","Heading","Component","Logo","Fragment","fontSize","fontWeight","textShadow","fontFamily","marginTop","marginBottom","MapComponent","viewport","latitude","longitude","zoom","mapData","location","id","onViewportChange","mapboxApiAccessToken","process","key","src","alt","Event","isMapAccOpen","viewportSize","window","matchMedia","matches","toggleMapAcc","event","title","start","entities","end","Card","Img","Body","Title","Badge","format","Text","Accordion","Toggle","as","eventKey","Collapse","OverlayTrigger","overlay","Tooltip","href","EventList","events","map","LoadingSpinner","pointerEvents","cursor","App","loading","showInputWarning","todayDate","Date","toISOString","slice","apiUrlPredicthq","axios","method","url","headers","Authorization","then","res","data","results","forEach","element","catch","err","console","log","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.28d8efb5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { InputGroup, FormControl, Button, Form, Alert } from \"react-bootstrap\";\r\n\r\nclass Navbar extends Component {\r\n  state = {\r\n    city: \"\",\r\n    isAlertOpen: false\r\n  };\r\n\r\n  onChange = e => {\r\n    this.setState({ [e.target.name]: e.target.value});\r\n    this.toggle();\r\n  };\r\n\r\n  onSubmit = e => {\r\n    if (this.state.city.trim().length === 0) {\r\n      e.preventDefault();\r\n      this.setState({ isAlertOpen: true });\r\n    } else {\r\n      e.preventDefault();\r\n      this.props.searchEvent(this.state.city);\r\n    }\r\n  };\r\n\r\n  toggle = () => {\r\n    this.setState({ isAlertOpen: false });\r\n\r\n  };\r\n  render() {\r\n    return (\r\n      <Form>\r\n        <InputGroup\r\n          size=\"sm\"\r\n          className=\"mb-3\"\r\n          style={{ margin: \"0 auto\", width: \"50%\", minWidth: \"220px\" }}\r\n        >\r\n          <InputGroup.Prepend>\r\n            <Button variant=\"primary\" type=\"submit\" onClick={this.onSubmit}>\r\n              Search\r\n            </Button>\r\n          </InputGroup.Prepend>\r\n          <FormControl\r\n            value={this.state.value}\r\n            onChange={this.onChange}\r\n            name=\"city\"\r\n            placeholder=\"Put in your city name\"\r\n            aria-label=\"Small\"\r\n            aria-describedby=\"inputGroup-sizing-sm\"\r\n          />\r\n        </InputGroup>\r\n        <Alert\r\n          variant=\"danger\"\r\n          style={{\r\n            width: \"50%\",\r\n            height: \"10vh\",\r\n            marginLeft: \"25%\",\r\n            textAlign: \"center\"\r\n          }}\r\n          show={this.state.isAlertOpen}\r\n          dismissible\r\n          onClick={() => this.toggle()}\r\n        >\r\n          <Alert.Heading>Input can't be empty!</Alert.Heading>\r\n        </Alert>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\r\nimport \"../index.css\";\r\n\r\nclass Logo extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <h1\r\n          style={{\r\n            fontSize: \"70px\",\r\n            fontWeight: \"900\",\r\n            textShadow: \"3px 3px gray\",\r\n            fontFamily: \"'Montserrat', sans-serif\",\r\n            textAlign: \"center\",\r\n            marginTop: \"20vh\",\r\n            marginBottom: \"5vh\"\r\n          }}\r\n        >\r\n          Event Seeker\r\n        </h1>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Logo;","import React, { Component } from \"react\";\r\nimport ReactMapGL, { Marker } from \"react-map-gl\";\r\n\r\nclass MapComponent extends Component {\r\n  state = {\r\n    viewport: {\r\n      width: 300,\r\n      height: 300,\r\n      latitude: 37.7577,\r\n      longitude: -122.4376,\r\n      zoom: 8\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { location, id } = this.props.mapData;\r\n    return (\r\n      <ReactMapGL\r\n        {...this.state.viewport}\r\n        onViewportChange={viewport =>\r\n          this.setState({\r\n            viewport: {\r\n              latitude: location[1],\r\n              longitude: location[0],\r\n              width: 300,\r\n              height: 300,\r\n              zoom: 13\r\n            }\r\n          })\r\n        }\r\n        mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_API_KEY}\r\n      >\r\n        <Marker key={id} latitude={location[1]} longitude={location[0]}>\r\n          <div>\r\n            <img\r\n              src=\"https://img.icons8.com/office/30/000000/marker.png\"\r\n              alt=\"marker\"\r\n            />\r\n          </div>\r\n        </Marker>\r\n      </ReactMapGL>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MapComponent;\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Card,\r\n  Badge,\r\n  Accordion,\r\n  Button,\r\n  Tooltip,\r\n  OverlayTrigger\r\n} from \"react-bootstrap\";\r\nimport Moment from \"react-moment\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport MapComponent from \"./MapComponent\";\r\n\r\nclass Event extends Component {\r\n  state = {\r\n    isMapAccOpen: false,\r\n    viewportSize: window.matchMedia(\"(min-width: 768px)\").matches\r\n  };\r\n\r\n  toggleMapAcc = () => {\r\n    this.setState({\r\n      isMapAccOpen: !this.state.isMapAccOpen,\r\n      viewportSize: window.matchMedia(\"(min-width: 768px)\").matches\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { title, start, entities, end, location } = this.props.event;\r\n    return (\r\n      <div\r\n        style={{\r\n          margin: \"0 auto\",\r\n          width: \"50%\",\r\n          minWidth: \"220px\"\r\n        }}\r\n      >\r\n        <Card\r\n          style={{\r\n            marginBottom: \"10px\",\r\n            marginTop: \"10px\",\r\n            width: \"100%\",\r\n            fontFamily: \"'Montserrat', sans-serif\"\r\n          }}\r\n        >\r\n          <Card.Img variant=\"top\" />\r\n          <Card.Body>\r\n            {/* <MapComponent  mapData = {this.props.event}/> */}\r\n            <Card.Title\r\n              style={{\r\n                fontWeight: \"bold\"\r\n              }}\r\n            >\r\n              {title}\r\n            </Card.Title>\r\n            <Card.Title>\r\n              <Badge variant=\"info\">start:</Badge>{\" \"}\r\n              <Moment format=\"YYYY/MM/DD HH:mm\">{start}</Moment>\r\n            </Card.Title>\r\n            <Card.Text></Card.Text>\r\n            <Accordion>\r\n              <Accordion.Toggle as={Button} variant=\"success\" eventKey=\"0\">\r\n                More info\r\n              </Accordion.Toggle>\r\n              <Accordion.Collapse eventKey=\"0\">\r\n                <Card.Body>\r\n                  <Accordion>\r\n                    <Accordion.Toggle\r\n                      as={Card.Text}\r\n                      eventKey=\"1\"\r\n                      onClick={() => this.toggleMapAcc()}\r\n                    >\r\n                      <OverlayTrigger\r\n                        overlay={\r\n                          <Tooltip id=\"tooltip-disabled\">\r\n                            Click to show map!\r\n                          </Tooltip>\r\n                        }\r\n                      >\r\n                        <Card.Text>\r\n                          <Badge variant=\"info\">venue:</Badge>{\" \"}\r\n                          {entities[0].name}\r\n                        </Card.Text>\r\n                      </OverlayTrigger>\r\n                    </Accordion.Toggle>\r\n                    <Accordion.Collapse eventKey=\"1\">\r\n                      <Card.Body>\r\n                        {this.state.isMapAccOpen ? (\r\n                          this.state.viewportSize ? (\r\n                            <MapComponent mapData={this.props.event} />\r\n                          ) : (\r\n                            <Card.Text>\r\n                              <a\r\n                                href={`https://www.openstreetmap.org/?mlat=${location[1]}&mlon=${location[0]}#map=15/${location[1]}/${location[0]}`}\r\n                                target=\"_blank\"\r\n                              >\r\n                                Click to show map!\r\n                              </a>\r\n                            </Card.Text>\r\n                          )\r\n                        ) : null}\r\n                      </Card.Body>\r\n                    </Accordion.Collapse>\r\n                  </Accordion>\r\n                  <Card.Text>\r\n                    <Badge variant=\"info\">end:</Badge>{\" \"}\r\n                    <Moment format=\"YYYY/MM/DD HH:mm\">{end}</Moment>\r\n                  </Card.Text>\r\n                </Card.Body>\r\n              </Accordion.Collapse>\r\n            </Accordion>\r\n          </Card.Body>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nEvent.propTypes = {\r\n  title: PropTypes.string,\r\n  start: PropTypes.string\r\n};\r\n\r\nexport default Event;\r\n","import React, { Component } from \"react\";\r\nimport Event from \"./Event\";\r\nclass EventList extends Component {\r\n  render() {\r\n    return this.props.events.map(event => (\r\n      <Event key={event.id} event={event} />\r\n    ));\r\n  }\r\n}\r\n\r\nexport default EventList;\r\n","import React from \"react\";\r\nimport { Component } from \"react\";\r\n\r\nclass LoadingSpinner extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <a\r\n          style={{\r\n            pointerEvents: \"none\",\r\n            cursor: \"default\",\r\n            marginLeft: \"48%\"\r\n          }}\r\n          href=\"https://icon-library.net/icon/spinner-icon-gif-1.html\"\r\n          title=\"Spinner Icon Gif #49747\"\r\n        >\r\n          <img\r\n            src=\"https://icon-library.net//images/spinner-icon-gif/spinner-icon-gif-1.jpg\"\r\n            width=\"50\"\r\n            alt=\"spinner\"\r\n          />\r\n        </a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoadingSpinner;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport axios from \"axios\";\r\n\r\nimport Navbar from \"./components/Navbar\";\r\nimport Logo from \"./components/Logo\";\r\nimport EventList from \"./components/EventList\";\r\nimport LoadingSpinner from \"./components/LoadingSpinner\";\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n      city: \"\",\r\n      events: [],\r\n      loading: false,\r\n      showInputWarning: false\r\n    };\r\n\r\n   searchEvent = (city) => {\r\n    const todayDate = new Date().toISOString().slice(0, 10);\r\n\r\n    const apiTokenPredicthq = process.env.REACT_APP_PREDICTHQ_API_KEY;\r\n\r\n    const apiUrlPredicthq = `https://api.predicthq.com/v1/events/?q=${city}&active.gte=${todayDate}&sort=start`;\r\n\r\n    this.setState({ loading: true }, () => {\r\n      axios({\r\n        method: \"get\",\r\n        url: apiUrlPredicthq,\r\n        headers: { Authorization: `Bearer ${apiTokenPredicthq}` }\r\n      })\r\n        .then(res => {\r\n          res.data.results.forEach(element => {\r\n            if (element.entities.length === 0) {\r\n              element.entities = [\r\n                {\r\n                  name: \"not specified\"\r\n                }\r\n              ]\r\n            }\r\n          });\r\n          this.setState({ events: res.data.results, loading: false });\r\n        })\r\n        .catch(err => {\r\n          console.log(err);\r\n          this.setState({ loading: false });\r\n        });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Logo />\r\n        <Navbar searchEvent={this.searchEvent} />\r\n        {this.state.loading ? (\r\n          <LoadingSpinner />\r\n        ) : (\r\n          <EventList events={this.state.events} />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport  ReactDOM  from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport \"bootstrap/dist/css/bootstrap.css\"\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}