{"version":3,"sources":["components/Navbar.jsx","components/Logo.jsx","components/Event.jsx","components/EventList.jsx","components/LoadingSpinner.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","state","city","isAlertOpen","onChange","e","_this","setState","Object","defineProperty","target","name","value","onSubmit","trim","length","preventDefault","props","searchEvent","toggle","_this2","this","react_default","a","createElement","Form","InputGroup","size","className","style","width","marginLeft","minWidth","Prepend","Button","variant","type","onClick","FormControl","placeholder","aria-label","aria-describedby","Alert","height","textAlign","show","dismissible","onClose","Heading","Component","Logo","Fragment","fontSize","fontWeight","textShadow","fontFamily","marginTop","marginBottom","Event","_this$props$event","event","summary","url","start","display","flexDirection","opacity","Card","Img","Body","Title","text","Badge","dist_default","format","local","Text","Link","color","href","EventList","events","map","components_Event","key","id","LoadingSpinner","pointerEvents","cursor","title","src","alt","App","loading","showInputWarning","apiUrl","concat","process","axios","get","then","res","sortedEvents","data","forEach","utc","Date","console","log","getTime","sort","event1","event2","catch","err","components_Navbar","components_EventList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.94e79866.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { InputGroup, FormControl, Button, Form, Alert } from \"react-bootstrap\";\r\n\r\nclass Navbar extends Component {\r\n  state = {\r\n    city: \"\",\r\n    isAlertOpen: false\r\n  };\r\n\r\n  onChange = e => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  onSubmit = e => {\r\n    if (this.state.city.trim().length === 0) {\r\n      e.preventDefault();\r\n      this.setState({ isAlertOpen: true });\r\n    } else {\r\n      e.preventDefault();\r\n      this.props.searchEvent(this.state.city);\r\n    }\r\n  };\r\n\r\n  toggle = () => {\r\n    this.setState({ isAlertOpen: false });\r\n  };\r\n  render() {\r\n    return (\r\n      <Form>\r\n        <InputGroup\r\n          size=\"sm\"\r\n          className=\"mb-3\"\r\n          style={{ width: \"50%\", marginLeft: \"25%\", minWidth: \"220px\" }}\r\n        >\r\n          <InputGroup.Prepend>\r\n            <Button variant=\"primary\" type=\"submit\" onClick={this.onSubmit}>\r\n              Search\r\n            </Button>\r\n          </InputGroup.Prepend>\r\n          <FormControl\r\n            value={this.state.value}\r\n            onChange={this.onChange}\r\n            name=\"city\"\r\n            placeholder=\"Put in your city name\"\r\n            aria-label=\"Small\"\r\n            aria-describedby=\"inputGroup-sizing-sm\"\r\n          />\r\n        </InputGroup>\r\n        <Alert\r\n          variant=\"danger\"\r\n          style={{\r\n            width: \"50%\",\r\n            height: \"10vh\",\r\n            marginLeft: \"25%\",\r\n            textAlign: \"center\"\r\n          }}\r\n          show={this.state.isAlertOpen}\r\n          dismissible\r\n          onClose={() => this.toggle()}\r\n        >\r\n          <Alert.Heading>Input can't be empty!</Alert.Heading>\r\n        </Alert>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport \"../index.css\";\r\n\r\nexport default function Logo() {\r\n  return (\r\n    <React.Fragment>\r\n        <h1\r\n          style={{\r\n            fontSize: \"70px\",\r\n            fontWeight: \"900\",\r\n            textShadow: \"3px 3px gray\",\r\n            fontFamily: \"'Montserrat', sans-serif\",\r\n            textAlign: \"center\",\r\n            marginTop: \"20vh\",\r\n            marginBottom: \"5vh\"\r\n          }}\r\n        >\r\n          Event Seeker\r\n        </h1>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Card, Badge } from \"react-bootstrap\";\r\nimport Moment from \"react-moment\";\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Event extends Component {\r\n  render() {\r\n    const { summary, name, url, start } = this.props.event;\r\n    return (\r\n      <div\r\n        style={{\r\n          width: \"50%\",\r\n          marginLeft: \"25%\",\r\n          display: \"flex\",\r\n          flexDirection: \"row\",\r\n          opacity: \"50%\",\r\n        }}\r\n      >\r\n        <Card style={{ marginTop: \"10px\", width: \"100%\", fontFamily: \"'Montserrat', sans-serif\", }}>\r\n          <Card.Img variant=\"top\" />\r\n          <Card.Body>\r\n            <Card.Title\r\n              style={{\r\n                fontWeight: \"bold\",\r\n              }}\r\n            >\r\n              {name.text}\r\n            </Card.Title>\r\n            <Card.Title>\r\n              <Badge variant=\"info\">\r\n                <Moment format=\"YYYY/MM/DD\">{start.local}</Moment>\r\n              </Badge>\r\n            </Card.Title>\r\n            <Card.Text>{summary}</Card.Text>\r\n            <Badge variant=\"success\">\r\n              <Card.Link style={{ color: \"white\" }} href={url}>\r\n                More info\r\n              </Card.Link>\r\n            </Badge>\r\n          </Card.Body>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Event;\r\n","import React, { Component } from \"react\";\r\nimport Event from \"./Event\";\r\nclass EventList extends Component {\r\n  render() {\r\n    return this.props.events.map(event => (\r\n      <Event key={event.id} event={event} />\r\n    ));\r\n  }\r\n}\r\n\r\nexport default EventList;\r\n","import React from \"react\";\r\n\r\nexport default function LoadingSpinner() {\r\n  return (\r\n    <div>\r\n      <a\r\n        style={{pointerEvents: \"none\", cursor: \"default\", marginLeft: \"48%\"}}\r\n        href=\"https://icon-library.net/icon/spinner-icon-gif-1.html\"\r\n        title=\"Spinner Icon Gif #49747\"\r\n      >\r\n        <img\r\n          src=\"https://icon-library.net//images/spinner-icon-gif/spinner-icon-gif-1.jpg\"\r\n          width=\"50\"\r\n          alt=\"spinner\"\r\n        />\r\n      </a>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\n\nimport Navbar from \"./components/Navbar\";\nimport Logo from \"./components/Logo\";\nimport EventList from \"./components/EventList\";\nimport LoadingSpinner from \"./components/LoadingSpinner\";\n\nclass App extends Component {\n  state = {\n    city: \"\",\n    events: [],\n    loading: false,\n    showInputWarning: false,\n  };\n\n  searchEvent = city => {\n      const ApiToken = process.env.REACT_APP_EVENTBRITE_API_KEY;\n      const apiUrl = `https://www.eventbriteapi.com/v3/events/search/?token=${ApiToken}&location.address=${city}`;\n      this.setState({ loading: true }, () => {\n        axios\n          .get(apiUrl)\n          .then(res => {\n            let sortedEvents = [];\n            (function() {\n              // Change date value to JS date object\n              res.data.events.forEach(event => {\n                event.start.utc = new Date(event.start.utc);\n                console.log(event.start.utc.getTime());\n              });\n\n              // Sort Events by Date\n              sortedEvents = res.data.events.sort(\n                (event1, event2) =>\n                  event1.start.utc.getTime() - event2.start.utc.getTime()\n              );\n            })();\n            this.setState({ events: sortedEvents, loading: false });\n          })\n          .catch(err => console.log(err));\n      });\n      console.log(this.state.events);\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Logo />\n        <Navbar searchEvent={this.searchEvent} />\n        {/* {this.state.showInputWarning ? <Warning /> : null} */}\n        {this.state.loading ? (\n          <LoadingSpinner />\n        ) : (\n          <EventList events={this.state.events} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport  ReactDOM  from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport \"bootstrap/dist/css/bootstrap.css\"\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}